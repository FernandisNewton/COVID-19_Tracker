{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","MapButtons.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isRed","Card","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","data","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","states","state","name","confirmed","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","props","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","MapButtons","active","onClick","App","setstates","set_state","stateInfo","setStateInfo","tableData","setTableData","lng","mapCenter","mapZoom","mapCountries","setMapCountries","caseType","setCaseType","india","obj","stateCases","stateRecov","stateDeaths","id","dist","districtData","getStatesData","onStateChange","event","stateCode","target","i","stateName","distInfo","FormControl","Select","variant","onChange","MenuItem","key","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4aecaf3b.chunk.js","sourcesContent":["import React from 'react'\nimport './Infobox.css'\nimport {Card,CardContent,Typography} from '@material-ui/core'\nfunction InfoBox({title,cases,total,isRed}) {\n    return (\n        <Card className=\"infobox\">\n            <CardContent>\n                <Typography className=\"infobox__title\" color=\"textSecondary\" >\n                <h4>{title}</h4>\n                </Typography>\n         <h2 className={`infobox__cases ${!isRed && \"infobox__cases--green\"}`}>{cases}</h2>\n           <Typography className=\"infobox__total\" color=\"textSecondary\">\n               in {total}  \n           </Typography>\n            </CardContent>\n        </Card> \n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 2000,\n    },\n  };\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\ndata.map((country) => (\n  <Circle\n    center={[country.countryInfo.lat, country.countryInfo.long]}\n    color={casesTypeColors[casesType].hex}\n    fillColor={casesTypeColors[casesType].hex}\n    fillOpacity={0.4}\n    radius={\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n    }\n  >\n    <Popup>\n      <div className=\"info-container\">\n        <div\n          className=\"info-flag\"\n          style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n        ></div>\n        <div className=\"info-name\">{country.country}</div>\n        <div className=\"info-confirmed\">\n          Cases: {numeral(country.cases).format(\"0,0\")}\n        </div>\n        <div className=\"info-recovered\">\n          Recovered: {numeral(country.recovered).format(\"0,0\")}\n        </div>\n        <div className=\"info-deaths\">\n          Deaths: {numeral(country.deaths).format(\"0,0\")}\n        </div>\n      </div>\n    </Popup>\n  </Circle>\n));\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React,{useState} from 'react'\nimport './Map.css'\n\nimport { showDataOnMap } from \"./util\";\nimport {Map as LeafletMap,TileLayer} from \"react-leaflet\"\n\n\nfunction Map({countries,casesType,center,zoom}) {\n     \n    return (\n        <div className=\"map\">\n         \n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer \n                    \n                   url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                   attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                 {showDataOnMap(countries,casesType)}\n                </LeafletMap> \n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport numeral from \"numeral\"\nfunction Table({states}) {\n    return (\n        <div className=\"table\">\n          {\n               \n              states == null? <tr>\n              <td><strong>Please select a State to view District data</strong></td>\n            <td><strong></strong></td>\n          </tr> :\n              states.map(state=> (\n            <tr>\n                <td>{state.name}</td>\n              <td><strong>{ numeral(state.confirmed).format(\"0,0\")}</strong></td>\n            </tr>\n              ))\n          }\n           \n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType=\"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, ...props}) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React from 'react'\nimport './Map.css'\nimport {Card,CardContent} from '@material-ui/core'\nfunction MapButtons({title,active,isRed, ...props}) {\n    return (\n      \n             <Card\n             onClick={props.onClick}\n             className={`button ${active && \"button--selected\"} ${isRed && 'button--red'}` }>\n                \n            <CardContent>\n                \n         <h2 className=\"title\">{title}</h2>\n           \n            </CardContent>\n        </Card> \n      \n    )\n}\n\nexport default MapButtons\n","import React,{useState,useEffect} from 'react';\nimport {FormControl,Select,MenuItem,Card,CardContent} from '@material-ui/core'\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table';\nimport LineGraph from './LineGraph'\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport {prettyPrintStat} from './util'\nimport './Map.css'\nimport MapButtons from './MapButtons'\n\n\nfunction App() {\n  const [states,setstates] = useState([]);\n  const [state,set_state] = useState(\"india\");\n  const [stateInfo,setStateInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  const [mapCenter,setMapCenter] = useState({lat:20.5937 , lng:78.9629});\n  const [mapZoom,setMapZoom] = useState(2);\n  const [mapCountries,setMapCountries] = useState([])\n  const [caseType,setCaseType] = useState(\"cases\")\n  \n  const india = ()=>{\n    fetch(\"https://api.covidindiatracker.com/total.json\").then((response)=>response.json()).then((data)=>{\n      var obj = {\n       stateCases:data.confirmed,\n       stateRecov:data.recovered,\n       stateDeaths:data.deaths,\n      }\n      setStateInfo(obj)  \n    })\n   }\n  useEffect(()=>{\n    \n     india();\n     fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          setMapCountries(data);\n        })\n        \n  },[])\n  useEffect(() => {\n    const getStatesData = async () =>{\n      await fetch('https://api.covidindiatracker.com/state_data.json').then((response) => response.json()).then((data)=>{\n        const states = data.map((state)=>(\n          {\n            name:state.state,\n            value:state.id,\n            cases:state.confirmed,\n            recovered:state.recovered,\n            deaths:state.deaths,\n            dist:state.districtData\n          }\n        ))  \n         setstates(states);\n    })\n  }\n  getStatesData()\n  },[]);\n  \n  const onStateChange = async (event) =>{\n    const stateCode = event.target.value;\n     \n    console.log(event)\n    set_state(stateCode);\n     for(var i=0;i<states.length;i++){\n       if(states[i].value===stateCode){\n        const obj = {\n          stateCases:states[i].cases,\n          stateRecov:states[i].recovered,\n          stateDeaths:states[i].deaths,\n          stateName:states[i].name,\n          distInfo:states[i].dist \n        }\n          setStateInfo(obj)\n       }\n     }\n     \n  }\n  useEffect(()=>{\n    if(state===\"india\"){\n       setTableData(null)\n       india();\n    }\n    else{\n      for(var i=0;i<states.length;i++){\n        if(states[i].value===state){\n          setTableData(states[i].dist)   \n         } \n        }\n    }\n  },[state,states])\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n      <h1>Covid-19 Tracker</h1>\n      <FormControl className=\"app__dropdown\">\n        <Select variant=\"outlined\" onChange={onStateChange} value={state}>\n        <MenuItem  value=\"india\">Select State</MenuItem>\n          {\n            states.map((state) => {\n           return <MenuItem key={state.value} value={state.value}>{state.name}</MenuItem>\n            })\n          }\n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app__stats\">\n       <InfoBox isRed title=\"COVID-19 Cases\" cases={prettyPrintStat(stateInfo.stateCases)} total={stateInfo.stateName == null ? 'India':stateInfo.stateName} />\n       <InfoBox title=\"Recovered\" cases={prettyPrintStat(stateInfo.stateRecov)} total={stateInfo.stateName == null ? 'India':stateInfo.stateName}/>\n       <InfoBox isRed title=\"Deaths\" cases={prettyPrintStat(stateInfo.stateDeaths)} total={stateInfo.stateName == null ? 'India':stateInfo.stateName}/>\n      </div>\n      <div className=\"map__data\">\n        \n       <div className=\"WWMap\">\n       <div className=\"buttons\">\n                 <MapButtons\n                 isRed\n                 active={caseType===\"cases\"}\n                 onClick={e=>setCaseType(\"cases\")}\n                 title=\"Cases\" />\n                 <MapButtons\n                 active={caseType===\"recovered\"}\n                  onClick={e=>setCaseType(\"recovered\")}\n                 title=\"Recovered\" />\n                 <MapButtons\n                 isRed \n                 active={caseType===\"deaths\"}\n                  onClick={e=>setCaseType(\"deaths\")}\n                 title=\"Deaths\" />\n             </div>\n      <Map \n        casesType= {caseType}\n        countries={mapCountries}\n        center={mapCenter}\n        zoom = {mapZoom}\n      />\n       </div>\n      </div>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>District wise Cases</h3>\n          <Table states={tableData} />\n        <h3 className=\"app__graphTitle\">Worldwide new {caseType}</h3>   \n           <LineGraph className=\"app__graph\" casesType={caseType} />\n        </CardContent>\n      </Card>\n     \n    </div>\n  );\n}\n \n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}